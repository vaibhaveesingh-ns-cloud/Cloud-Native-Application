AWSTemplateFormatVersion: '2010-09-09'
Description: 'PixelBoard Cloud-Native Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Environment name
  
  DomainName:
    Type: String
    Default: ''
    Description: Domain name for the application (optional)
  
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access

Resources:
  # S3 Bucket for file uploads
  PixelBoardS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'pixelboard-uploads-${Environment}-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE]
            AllowedOrigins: ['*']
            MaxAge: 3000
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ImageProcessorLambda.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: photos/

  # S3 Bucket Policy
  PixelBoardS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PixelBoardS3Bucket
      PolicyDocument:
        Statement:
          - Sid: AllowLambdaAccess
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource: !Sub '${PixelBoardS3Bucket}/*'
          - Sid: AllowEC2Access
            Effect: Allow
            Principal:
              AWS: !GetAtt EC2InstanceRole.Arn
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource: !Sub '${PixelBoardS3Bucket}/*'

  # DynamoDB Table for Sessions
  SessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'pixelboard-sessions-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: PixelBoard

  # DynamoDB Table for User Activity
  UserActivityTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'pixelboard-user-activity-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: activityId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: activityId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: PixelBoard

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'PixelBoardLambdaRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub '${PixelBoardS3Bucket}/*'

  # Lambda Function for Image Processing
  ImageProcessorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'pixelboard-image-processor-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Image processor placeholder');
            return { statusCode: 200, body: 'OK' };
          };
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          S3_BUCKET: !Ref PixelBoardS3Bucket
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: PixelBoard

  # Lambda Permission for S3
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ImageProcessorLambda
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub '${PixelBoardS3Bucket}/*'

  # VPC for EC2
  PixelBoardVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub 'PixelBoard-VPC-${Environment}'

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 'PixelBoard-IGW-${Environment}'

  # Attach Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref PixelBoardVPC

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PixelBoardVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'PixelBoard-Public-Subnet-${Environment}'

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PixelBoardVPC
      Tags:
        - Key: Name
          Value: !Sub 'PixelBoard-Public-Routes-${Environment}'

  # Default Route
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Route Table with Subnet
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Security Group for EC2
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'PixelBoard-EC2-SG-${Environment}'
      GroupDescription: Security group for PixelBoard EC2 instance
      VpcId: !Ref PixelBoardVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub 'PixelBoard-EC2-SG-${Environment}'

  # IAM Role for EC2
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'PixelBoardEC2Role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${PixelBoardS3Bucket}'
                  - !Sub '${PixelBoardS3Bucket}/*'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt SessionsTable.Arn
                  - !GetAtt UserActivityTable.Arn
                  - !Sub '${UserActivityTable.Arn}/index/*'
        - PolicyName: LambdaInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt ImageProcessorLambda.Arn

  # Instance Profile
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub 'PixelBoardEC2Profile-${Environment}'
      Roles:
        - !Ref EC2InstanceRole

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316  # Ubuntu 22.04 LTS (update as needed)
      InstanceType: t3.small
      KeyName: !Ref KeyPairName
      VpcId: !Ref PixelBoardVPC
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update
          apt-get install -y curl git nginx
          
          # Install Node.js
          curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
          apt-get install -y nodejs
          
          # Install PM2
          npm install -g pm2
          
          # Create application directory
          mkdir -p /home/ubuntu/pixelboard
          chown ubuntu:ubuntu /home/ubuntu/pixelboard
          
          # Set environment variables
          echo "AWS_REGION=${AWS::Region}" >> /etc/environment
          echo "S3_BUCKET_NAME=${PixelBoardS3Bucket}" >> /etc/environment
          echo "DYNAMODB_SESSION_TABLE=${SessionsTable}" >> /etc/environment
          echo "LAMBDA_IMAGE_PROCESSOR=${ImageProcessorLambda}" >> /etc/environment
          echo "NODE_ENV=production" >> /etc/environment
      Tags:
        - Key: Name
          Value: !Sub 'PixelBoard-EC2-${Environment}'
        - Key: Environment
          Value: !Ref Environment

Outputs:
  S3BucketName:
    Description: S3 Bucket for file uploads
    Value: !Ref PixelBoardS3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'

  SessionsTableName:
    Description: DynamoDB table for sessions
    Value: !Ref SessionsTable
    Export:
      Name: !Sub '${AWS::StackName}-SessionsTable'

  UserActivityTableName:
    Description: DynamoDB table for user activity
    Value: !Ref UserActivityTable
    Export:
      Name: !Sub '${AWS::StackName}-UserActivityTable'

  LambdaFunctionName:
    Description: Lambda function for image processing
    Value: !Ref ImageProcessorLambda
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunction'

  EC2InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EC2Instance
    Export:
      Name: !Sub '${AWS::StackName}-EC2Instance'

  EC2PublicIP:
    Description: EC2 Instance Public IP
    Value: !GetAtt EC2Instance.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-EC2PublicIP'

  ApplicationURL:
    Description: Application URL
    Value: !Sub 'http://${EC2Instance.PublicIp}'
    Export:
      Name: !Sub '${AWS::StackName}-ApplicationURL'
